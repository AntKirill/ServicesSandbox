package applications.appsManager;

import applications.Application;
import applications.ApplicationCreator;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class AllAppsTogether extends JFrame {
    private final @NotNull AppsManagerController myController;
    private JPanel panel1;
    private JComboBox<ApplicationCreator> comboBox1;
    private JButton executeButton;
    private JMenuBar menubar;
    private JLabel loadingLabel;
    private JPanel loadingPanel;

    public AllAppsTogether(String header, @NotNull AppsManagerController controller) {
        super(header);
        this.myController = controller;
        setContentPane(panel1);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        loadingLabel.setVisible(false);
        CardLayout cardLayout = (CardLayout) loadingPanel.getLayout();
        cardLayout.next(loadingPanel);
        final JMenu settingsMenu = new JMenu("Settings");
        menubar.add(settingsMenu);
        pack();
        for (ApplicationCreator factory : ApplicationsManager.getAllApplicationFactories()) {
            comboBox1.addItem(factory);
        }
        AllAppsTogether jFrameInstance = this;
        executeButton.addActionListener(e -> {
            final ApplicationCreator factory = (ApplicationCreator) comboBox1.getSelectedItem();
            if (factory == null) {
                JOptionPane.showMessageDialog(panel1, "Please, choose an application.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            executeButton.setEnabled(false);
            cardLayout.next(loadingPanel);
            new SwingWorker() {
                private Exception exceptionOccurred;
                private Application application;

                @Override
                protected Object doInBackground() {
                    try {
                        application = myController.createNewApplication(factory, true, jFrameInstance);
                    } catch (RuntimeException e) {
                        exceptionOccurred = e;
                    } catch (GeneralSecurityException ex) {
                        ex.printStackTrace();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    return null;
                }

                @Override
                protected void done() {
                    executeButton.setEnabled(true);
                    cardLayout.next(loadingPanel);
                    if (exceptionOccurred != null) {
                        JOptionPane.showMessageDialog(panel1, "Sorry, but an exception occurred: " + exceptionOccurred.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    application.showHandledUi();
                }
            }.execute();
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-1));
        panel1.setEnabled(true);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null));
        menubar = new JMenuBar();
        panel2.add(menubar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
        panel3.setBackground(new Color(-1));
        panel1.add(panel3, new GridConstraints(1, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        executeButton = new JButton();
        executeButton.setText("Execute");
        panel3.add(executeButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        panel3.add(comboBox1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadingPanel = new JPanel();
        loadingPanel.setLayout(new CardLayout(0, 0));
        loadingPanel.setBackground(new Color(-1));
        loadingPanel.setEnabled(true);
        panel3.add(loadingPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loadingLabel = new JLabel();
        loadingLabel.setHorizontalAlignment(0);
        loadingLabel.setIcon(new ImageIcon(getClass().getResource("/images/loading4.gif")));
        loadingLabel.setText("");
        loadingLabel.setVerticalAlignment(1);
        loadingPanel.add(loadingLabel, "Card1");
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-1));
        loadingPanel.add(panel4, "Card2");
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
